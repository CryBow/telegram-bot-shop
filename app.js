// const bot = new Telegraf('7687730781:AAFd1lhjOGFPuakDfT_rba1OtfK8xJdDeKM');
// bot.use(session()); // <-- —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å


// // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
// function dbClient() {
//   return new Client({
//     user: 'postgres',
//     host: 'localhost',
//     database: 'supermarket',
//     password: '1234',
//     port: 5432,
//   });
// }


// const { Telegraf, session } = require('telegraf');
// const { Client } = require('pg');

// const bot = new Telegraf('7687730781:AAFd1lhjOGFPuakDfT_rba1OtfK8xJdDeKM');
// bot.use(session()); // <-- —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å


// // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
// function dbClient() {
//   return new Client({
//     user: 'postgres',
//     host: 'localhost',
//     database: 'supermarket',
//     password: '1234',
//     port: 5432,
//   });
// }

// app.js

const { Telegraf, session, Markup } = require('telegraf');
const { Client } = require('pg');
const express = require('express');
const app = express();
const PORT = 3000;

const bot = new Telegraf('7687730781:AAFd1lhjOGFPuakDfT_rba1OtfK8xJdDeKM');
bot.use(session());

app.use(express.static('public'));

// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
bot.use((ctx, next) => {
  if (!ctx.session) {
    ctx.session = {};
  }
  if (!ctx.session.cart) {
    ctx.session.cart = [];
  }
  return next();
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
const dbConfig = {
  user: 'postgres',
  host: 'localhost',
  database: 'supermarket',
  password: '1234',
  port: 5432,
};

function dbClient() {
  return new Client(dbConfig);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
const mainMenu = Markup.inlineKeyboard([
  [{ text: 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', callback_data: 'search' }],
  [{ text: 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'catalog' }],
  [{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'profile' }],
  [{ text: '/restart', callback_data: 'restart' }]
]);

// /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.start((ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/restart"
bot.action('restart', (ctx) => {
  ctx.session = {}; // —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
  ctx.reply('–ß–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.', mainMenu);
  ctx.answerCbQuery();
});

// =======================
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"
// =======================
bot.action('search', async (ctx) => {
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:');
  ctx.session.waitingForSearch = true;
  ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
bot.on('text', async (ctx) => {
  const client = dbClient();
  await client.connect();
  try {
    const text = ctx.message.text.trim();
    if (ctx.session?.waitingForSearch) {
      ctx.session.waitingForSearch = false;
      const res = await client.query(
        `SELECT * FROM "–¢–æ–≤–∞—Ä" WHERE LOWER("–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞") LIKE $1 OR LOWER("–û–ø–∏—Å–∞–Ω–∏–µ") LIKE $1`,
        [`%${text.toLowerCase()}%`]
      );
      if (res.rows.length === 0) {
        await ctx.reply('‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      } else {
        const list = res.rows.map(t =>
          `üî∏ <b>${t.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞}</b>\n${t.–û–ø–∏—Å–∞–Ω–∏–µ}\nüíµ ${t.–¶–µ–Ω–∞} ‚ÇΩ`
        ).join('\n\n');
        await ctx.replyWithHTML(`üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n${list}`);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.');
  } finally {
    await client.end();
  }
});

// =======================
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤" ‚Äì –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π inline
// =======================
bot.action('catalog', async (ctx) => {
  const client = dbClient();
  await client.connect();
  try {
    const result = await client.query('SELECT * FROM "–¢–æ–≤–∞—Ä" LIMIT 10');
    if (result.rows.length === 0) {
      await ctx.reply('–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.');
    } else {
      ctx.session.catalog = result.rows;
      ctx.session.catalogIndex = 0;
      await updateCatalogMessage(ctx);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
  } finally {
    await client.end();
  }
  ctx.answerCbQuery();
});

async function updateCatalogMessage(ctx) {
  const catalog = ctx.session.catalog;
  const catalogIndex = ctx.session.catalogIndex;
  const product = catalog[catalogIndex];
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
  const baseUrl = process.env.BASE_URL || 'http://localhost:3000';
  const imageUrl = `${baseUrl}/${product.–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ}`;
  
  // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:
  try {
    await ctx.replyWithPhoto({ url: imageUrl });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err);
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
    await ctx.reply(`–§–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${imageUrl}`);
  }
  
  const msg = `<b>${product.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞}</b>\n${product.–û–ø–∏—Å–∞–Ω–∏–µ}\nüí∞ ${product.–¶–µ–Ω–∞} ‚ÇΩ`;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:
  let leftBtn = (catalogIndex > 0) ? Markup.button.callback('<', 'prev') : Markup.button.callback(' ', 'none');
  let rightBtn = (catalogIndex < catalog.length - 1) ? Markup.button.callback('>', 'next') : Markup.button.callback(' ', 'none');
  
  const keyboard = Markup.inlineKeyboard([
    [leftBtn, Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', `add_${product.id_–¢–æ–≤–∞—Ä–∞}`), rightBtn],
    [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
  ]);
  
  await ctx.replyWithHTML(msg, keyboard);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
// async function updateCatalogMessage(ctx) {
//   const catalog = ctx.session.catalog;
//   const catalogIndex = ctx.session.catalogIndex;
//   const product = catalog[catalogIndex];
//   // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—ç—à –ø–µ—Ä–µ–¥ –ø—É—Ç–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)


// const baseUrl = 'http://localhost:3000';  // –∏–ª–∏ –≤–∑—è—Ç—å –∏–∑ environment, –Ω–∞–ø—Ä–∏–º–µ—Ä process.env.BASE_URL
// const imageUrl = `${baseUrl}/${product.–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ}`;
// await ctx.replyWithPhoto({ url: imageUrl }).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err));

//   // const imageUrl = '/' + product.–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ;
  
//   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π)
//   // –ï—Å–ª–∏ –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å editMessageMedia, –Ω–æ –ø—Ä–æ—â–µ –æ—Ç–ø—Ä–∞–≤–∏–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
//   // await ctx.replyWithPhoto({ url: imageUrl }).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err));
  
//   const msg = `<b>${product.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞}</b>\n${product.–û–ø–∏—Å–∞–Ω–∏–µ}\nüí∞ ${product.–¶–µ–Ω–∞} ‚ÇΩ`;
  
//   // –§–æ—Ä–º–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
//   let leftBtn = (catalogIndex > 0) ? Markup.button.callback('<', 'prev') : Markup.button.callback(' ', 'none');
//   let rightBtn = (catalogIndex < catalog.length - 1) ? Markup.button.callback('>', 'next') : Markup.button.callback(' ', 'none');
  
//   const keyboard = Markup.inlineKeyboard([
//     [leftBtn, Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', `add_${product.id_–¢–æ–≤–∞—Ä–∞}`), rightBtn],
//     [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
//   ]);
  
//   // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//   // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
//   await ctx.replyWithHTML(msg, keyboard);
// }


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "prev" –∏ "next"
bot.action('prev', async (ctx) => {
  if (ctx.session.catalogIndex > 0) {
    ctx.session.catalogIndex--;
    await updateCatalogMessage(ctx);
  }
  ctx.answerCbQuery();
});

bot.action('next', async (ctx) => {
  if (ctx.session.catalog && ctx.session.catalogIndex < ctx.session.catalog.length - 1) {
    ctx.session.catalogIndex++;
    await updateCatalogMessage(ctx);
  }
  ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
bot.action(/^add_(\d+)$/, async (ctx) => {
  const productId = ctx.match[1];
  const client = dbClient();
  await client.connect();
  try {
    const res = await client.query(
      `SELECT * FROM "–¢–æ–≤–∞—Ä" WHERE "id_–¢–æ–≤–∞—Ä–∞" = $1`,
      [productId]
    );
    if (res.rows.length === 0) {
      await ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    } else {
      const product = res.rows[0];
      let cart = ctx.session.cart;
      const existing = cart.find(item => item.id == product.id_–¢–æ–≤–∞—Ä–∞);
      if (existing) {
        existing.quantity++;
      } else {
        cart.push({
          id: product.id_–¢–æ–≤–∞—Ä–∞,
          name: product.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞,
          price: product.–¶–µ–Ω–∞,
          image: product.–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, // –Ω–∞–ø—Ä–∏–º–µ—Ä, "images/–ú–æ–ª–æ–∫–æ.jpg"
          quantity: 1
        });
      }
      ctx.session.cart = cart;
      await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${product.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`);
    }
  } catch (err) {
    console.error(err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.');
  } finally {
    await client.end();
    ctx.answerCbQuery();
  }
});


bot.action('basket', async (ctx) => {
  if (!ctx.session.user) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ.');
    return ctx.answerCbQuery();
  }
  let cart = ctx.session.cart || [];
  if (cart.length === 0) {
    await ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
    return ctx.answerCbQuery();
  }
  
  let msg = 'üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n';
  let inlineButtons = [];
  cart.forEach(item => {
    msg += `üîπ ${item.name} ‚Äî ${item.price} ‚ÇΩ x ${item.quantity}\n`;
    inlineButtons.push([Markup.button.callback(`–£–¥–∞–ª–∏—Ç—å "${item.name}"`, `remove_${item.id}`)]);
  });
  inlineButtons.push([Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'checkout')]);
  inlineButtons.push([Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]);

  await ctx.replyWithHTML(msg, Markup.inlineKeyboard(inlineButtons));
  ctx.answerCbQuery();
});

bot.action(/^remove_(\d+)$/, async (ctx) => {
  const productId = ctx.match[1];
  let cart = ctx.session.cart || [];
  const index = cart.findIndex(item => item.id == productId);
  if (index > -1) {
    if (cart[index].quantity > 1) {
      cart[index].quantity--;
    } else {
      cart.splice(index, 1);
    }
    ctx.session.cart = cart;
    await ctx.reply('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.');
  } else {
    await ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.');
  }
  ctx.answerCbQuery();
});




// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('back', (ctx) => {
  ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
  ctx.answerCbQuery();
});


// =======================
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
// =======================
bot.action('profile', async (ctx) => {
  if (!ctx.session.user) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const menu = Markup.inlineKeyboard([
      [Markup.button.callback('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'login')],
      [Markup.button.callback('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'register')],
      [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
    ]);
    await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', menu);
  } else {
    const user = ctx.session.user;
    const profileText =
      `üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n` +
      `<b>Email:</b> ${user.email}\n` +
      `<b>–ò–º—è:</b> ${user.–ò–º—è || user.firstName}\n` +
      `<b>–§–∞–º–∏–ª–∏—è:</b> ${user.–§–∞–º–∏–ª–∏—è || user.lastName}\n` +
      `<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> ${user.–û—Ç—á–µ—Å—Ç–≤–æ || user.middleName}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.–¢–µ–ª–µ—Ñ–æ–Ω || user.phone}\n` +
      `<b>–ê–¥—Ä–µ—Å:</b> ${user.–ê–¥—Ä–µ—Å || user.address}\n`;
    const menu = Markup.inlineKeyboard([
      [Markup.button.callback('–ö–æ—Ä–∑–∏–Ω–∞', 'basket')],
      [Markup.button.callback('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', 'order_history')],
      [Markup.button.callback('–í—ã–π—Ç–∏', 'logout')],
      [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
    ]);
    await ctx.replyWithHTML(profileText, menu);
  }
  ctx.answerCbQuery();
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
bot.action('checkout', async (ctx) => {
  if (!ctx.session.user) {
    await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å.');
    return ctx.answerCbQuery();
  }
  if (!ctx.session.cart || ctx.session.cart.length === 0) {
    await ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
    return ctx.answerCbQuery();
  }
  const user = ctx.session.user;
  const cart = ctx.session.cart;
  let total = 0;
  cart.forEach(item => {
    total += item.price * item.quantity;
  });
  
  const client = dbClient();
  await client.connect();
  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const orderRes = await client.query(
      `INSERT INTO "–ó–∞–∫–∞–∑—ã" ("–°—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞–∫–∞–∑–∞", "id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
       VALUES ('–û—Ñ–æ—Ä–º–ª–µ–Ω', $1, $2) RETURNING "id_–ó–∞–∫–∞–∑–∞"`,
      [total, user.id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]
    );
    const orderId = orderRes.rows[0].id_–ó–∞–∫–∞–∑–∞;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ "–ö–æ—Ä–∑–∏–Ω–∞"
    const basketRes = await client.query(
      `INSERT INTO "–ö–æ—Ä–∑–∏–Ω–∞" ("–û–±—â–∞—è_—Å—É–º–º–∞", "id_–ó–∞–∫–∞–∑–∞")
       VALUES ($1, $2) RETURNING "id_–ö–æ—Ä–∑–∏–Ω—ã"`,
      [total, orderId]
    );
    const basketId = basketRes.rows[0].id_–ö–æ—Ä–∑–∏–Ω—ã;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—É "–ö–æ—Ä–∑–∏–Ω–∞_–¢–æ–≤–∞—Ä"
    for (const item of cart) {
      await client.query(
        `INSERT INTO "–ö–æ—Ä–∑–∏–Ω–∞_–¢–æ–≤–∞—Ä" ("id_–ö–æ—Ä–∑–∏–Ω—ã", "id_–¢–æ–≤–∞—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
         VALUES ($1, $2, $3)`,
        [basketId, item.id, item.quantity]
      );
    }
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    ctx.session.cart = [];
    await ctx.reply('–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
  } finally {
    await client.end();
    ctx.answerCbQuery();
  }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "order_history" ‚Äì –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥)
bot.action('order_history', async (ctx) => {
  if (!ctx.session.user) {
    await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å.');
    return ctx.answerCbQuery();
  }
  const client = dbClient();
  await client.connect();
  try {
    const userId = ctx.session.user.id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    const res = await client.query(
      `SELECT "id_–ó–∞–∫–∞–∑–∞", "–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è", "–°—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞–∫–∞–∑–∞"
       FROM "–ó–∞–∫–∞–∑—ã"
       WHERE "id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" = $1
       ORDER BY "–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è" DESC LIMIT 5`,
      [userId]
    );
    if (res.rows.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
    } else {
      const list = res.rows.map(o =>
        `–ó–∞–∫–∞–∑ #${o.id_–ó–∞–∫–∞–∑–∞}\n–î–∞—Ç–∞: ${new Date(o.–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è).toLocaleString()}\n–°—Ç–∞—Ç—É—Å: ${o.–°—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞}\n–°—É–º–º–∞: ${o.–°—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞–∫–∞–∑–∞} ‚ÇΩ`
      ).join('\n\n');
      await ctx.reply(list);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  } finally {
    await client.end();
    ctx.answerCbQuery();
  }
});



bot.action('login', (ctx) => {
  ctx.reply('–î–ª—è –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://yourserver.com/login');
  ctx.answerCbQuery();
});

bot.action('register', (ctx) => {
  ctx.reply('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://yourserver.com/register');
  ctx.answerCbQuery();
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "logout" ‚Äì –≤—ã—Ö–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
bot.action('logout', async (ctx) => {
  ctx.session.user = null;
  ctx.session.cart = [];
  await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏.');
  ctx.answerCbQuery();
});


bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

