const { Telegraf, session, Markup } = require('telegraf');
const { Client } = require('pg');
const express = require('express');
const app = express();
const PORT = 3000;

const bot = new Telegraf('7687730781:AAFd1lhjOGFPuakDfT_rba1OtfK8xJdDeKM');
bot.use(session());

app.use(express.static('public'));

// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
bot.use((ctx, next) => {
  if (!ctx.session) {
    ctx.session = {};
  }
  if (!ctx.session.cart) {
    ctx.session.cart = [];
  }
  return next();
});

const dbConfig = {
  user: 'postgres',
  host: 'localhost',
  database: 'supermarket',
  password: '1234',
  port: 5432,
};

function dbClient() {
  return new Client(dbConfig);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
const mainMenu = Markup.inlineKeyboard([
  [{ text: 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', callback_data: 'search' }],
  [{ text: 'üìñ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'catalog' }],
  [{ text: 'üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data: 'basket' }],
  [{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'profile' }],
  [{ text: '/restart', callback_data: 'restart' }]
]);

bot.start(async (ctx) => {
  await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', Markup.removeKeyboard());
  // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  await ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['/restart'], ['–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞']
    ]).resize()
  );
});

bot.hears('/restart', async (ctx) => {
  await ctx.reply('–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!', Markup.removeKeyboard());
  ctx.reply('–ß–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.', mainMenu);
  await ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['/restart'], ['–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞']
    ]).resize()
  );
});

bot.hears('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', async (ctx) => {
  await deleteLastMessage(ctx);
  ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/restart"
bot.action('restart', (ctx) => {
  ctx.session = {}; // —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
  ctx.reply('–ß–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.', mainMenu);
  ctx.answerCbQuery();
});

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"
bot.action('search', async (ctx) => {
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:');
  ctx.session.waitingForSearch = true;
  ctx.answerCbQuery();
});

// –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
bot.action('catalog', async (ctx) => {
  await showCatalog(ctx);
  ctx.answerCbQuery();
});

async function showCatalog(ctx) {
  const client = dbClient();
  await client.connect();
  try {
    await deleteLastMessage(ctx); 
    const result = await client.query('SELECT * FROM "–¢–æ–≤–∞—Ä"');
    if (result.rows.length === 0) {
      await ctx.reply('–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.');
    } else {
      ctx.session.catalog = result.rows;
      ctx.session.catalogIndex = 0;
      await updateCatalogMessage(ctx);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
  } finally {
    await client.end();
  }
}


async function updateCatalogMessage(ctx) {
  const catalog = ctx.session.catalog;
  const catalogIndex = ctx.session.catalogIndex;
  const product = catalog[catalogIndex];
  const githubRawBaseUrl = 'https://raw.githubusercontent.com/CryBow/telegram-bot-shop/main/public/';
  const imagePathFromDB = product.–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ;
  const imageUrl = encodeURI(githubRawBaseUrl + imagePathFromDB);

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (ctx.session.lastMessageId) {
    try {
      await ctx.deleteMessage(ctx.session.lastMessageId);
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
    }
  }

  let sentMessage;
  try {
    sentMessage = await ctx.replyWithPhoto(
      { url: imageUrl },
      {
        caption: `<b>${product.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞}</b>\n${product.–û–ø–∏—Å–∞–Ω–∏–µ}\nüí∞ ${product.–¶–µ–Ω–∞} ‚ÇΩ`,
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [
            catalogIndex > 0
              ? Markup.button.callback('<', 'prev')
              : Markup.button.callback(' ', 'none'),
            Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', `add_${product.id_–¢–æ–≤–∞—Ä–∞}`),
            catalogIndex < catalog.length - 1
              ? Markup.button.callback('>', 'next')
              : Markup.button.callback(' ', 'none')
          ],
          [Markup.button.callback('–û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'basket')],
          [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
        ])
      }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err);
    sentMessage = await ctx.reply('–§–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ' + imageUrl);
  }
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  ctx.session.lastMessageId = sentMessage.message_id;
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "prev" –∏ "next"
bot.action('prev', async (ctx) => {
  if (ctx.session.catalogIndex > 0) {
    ctx.session.catalogIndex--;
    await updateCatalogMessage(ctx);
  }
  ctx.answerCbQuery();
});

bot.action('next', async (ctx) => {
  if (ctx.session.catalog && ctx.session.catalogIndex < ctx.session.catalog.length - 1) {
    ctx.session.catalogIndex++;
    await updateCatalogMessage(ctx);
  }
  ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
bot.action(/^add_(\d+)$/, async (ctx) => {
  const productId = ctx.match[1];
  const client = dbClient();
  await client.connect();
  try {
    const res = await client.query(
      `SELECT * FROM "–¢–æ–≤–∞—Ä" WHERE "id_–¢–æ–≤–∞—Ä–∞" = $1`,
      [productId]
    );
    if (res.rows.length === 0) {
      await ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    } else {
      const product = res.rows[0];
      let cart = ctx.session.cart;
      const existing = cart.find(item => item.id == product.id_–¢–æ–≤–∞—Ä–∞);
      if (existing) {
        existing.quantity++;
      } else {
        cart.push({
          id: product.id_–¢–æ–≤–∞—Ä–∞,
          name: product.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞,
          price: product.–¶–µ–Ω–∞,
          image: product.–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, 
          quantity: 1
        });
      }
      ctx.session.cart = cart;
      await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${product.–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`);
    }
  } catch (err) {
    console.error(err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.');
  } finally {
    await client.end();
    ctx.answerCbQuery();
  }
});

//–ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
bot.action('basket', async (ctx) => {
  await deleteLastMessage(ctx); 
  await showUserCart(ctx);
  ctx.answerCbQuery();
});

//–í—ã–∑–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
async function showUserCart(ctx) {
  if (!ctx.session.user) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ.');
    await showUserProfile(ctx); 
    return;
  }

  let cart = ctx.session.cart || [];
  if (cart.length === 0) {
    await ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
    ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
    return;
  }

  let msg = 'üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n';
  let inlineButtons = [];
  cart.forEach(item => {
    msg += `üîπ ${item.name} ‚Äî ${item.price} ‚ÇΩ x ${item.quantity}\n`;
    inlineButtons.push([Markup.button.callback(`–£–¥–∞–ª–∏—Ç—å "${item.name}"`, `remove_${item.id}`)]);
  });
  inlineButtons.push([Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'checkout')]);
  inlineButtons.push([Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]);

  await ctx.replyWithHTML(msg, Markup.inlineKeyboard(inlineButtons));
}

//–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
bot.action(/^remove_(\d+)$/, async (ctx) => {
  const productId = ctx.match[1];
  let cart = ctx.session.cart || [];
  const index = cart.findIndex(item => item.id == productId);
  if (index > -1) {
    if (cart[index].quantity > 1) {
      cart[index].quantity--;
    } else {
      cart.splice(index, 1);
    }
    ctx.session.cart = cart;
    await ctx.reply('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.');
    await showUserCart(ctx);
  } else {
    await ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.');
  }
  ctx.answerCbQuery();
});




// –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
bot.action('profile', async (ctx) => {
  await deleteLastMessage(ctx); 
  await showUserProfile(ctx);
  ctx.answerCbQuery();
  
});

async function showUserProfile(ctx) {
  if (!ctx.session.user) {
    const menu = Markup.inlineKeyboard([
      [Markup.button.callback('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'login')],
      [Markup.button.callback('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'register')],
      [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
    ]);
    await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', menu);
  } else {
    const user = ctx.session.user;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    let formattedBirthDate = '';
    if (user.–î–∞—Ç–∞_–†–æ–∂–¥–µ–Ω–∏—è || user.birthDate) {
      const date = new Date(user.–î–∞—Ç–∞_–†–æ–∂–¥–µ–Ω–∏—è || user.birthDate);
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      formattedBirthDate = `${day}.${month}.${year}`;
    } else {
      formattedBirthDate = '‚Äî';
    }

    const profileText =
      `üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n` +
      `<b>Email:</b> ${user.email}\n` +
      `<b>–ò–º—è:</b> ${user.–ò–º—è || user.firstName}\n` +
      `<b>–§–∞–º–∏–ª–∏—è:</b> ${user.–§–∞–º–∏–ª–∏—è || user.lastName}\n` +
      `<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> ${user.–û—Ç—á–µ—Å—Ç–≤–æ || user.middleName}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.–¢–µ–ª–µ—Ñ–æ–Ω || user.phone}\n` +
      `<b>–ê–¥—Ä–µ—Å:</b> ${user.–ê–¥—Ä–µ—Å || user.address}\n` +
      `<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${formattedBirthDate}\n`;

    const menu = Markup.inlineKeyboard([
      [Markup.button.callback('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', 'order_history')],
      [Markup.button.callback('–í—ã–π—Ç–∏', 'logout')],
      [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
    ]);
    
    await ctx.replyWithHTML(profileText, menu);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
bot.action('checkout', async (ctx) => {
  await deleteLastMessage(ctx);
  if (!ctx.session.user) {
    await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å.');
    return ctx.answerCbQuery();
  }
  if (!ctx.session.cart || ctx.session.cart.length === 0) {
    await ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
    return ctx.answerCbQuery();
  }
  const user = ctx.session.user;
  const cart = ctx.session.cart;
  let total = 0;
  cart.forEach(item => {
    total += item.price * item.quantity;
  });
  
  const client = dbClient();
  await client.connect();
  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const orderRes = await client.query(
      `INSERT INTO "–ó–∞–∫–∞–∑—ã" ("–°—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞–∫–∞–∑–∞", "id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
       VALUES ('–û—Ñ–æ—Ä–º–ª–µ–Ω', $1, $2) RETURNING "id_–ó–∞–∫–∞–∑–∞"`,
      [total, user.id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]
    );
    const orderId = orderRes.rows[0].id_–ó–∞–∫–∞–∑–∞;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ "–ö–æ—Ä–∑–∏–Ω–∞"
    const basketRes = await client.query(
      `INSERT INTO "–ö–æ—Ä–∑–∏–Ω–∞" ("–û–±—â–∞—è_—Å—É–º–º–∞", "id_–ó–∞–∫–∞–∑–∞")
       VALUES ($1, $2) RETURNING "id_–ö–æ—Ä–∑–∏–Ω—ã"`,
      [total, orderId]
    );
    const basketId = basketRes.rows[0].id_–ö–æ—Ä–∑–∏–Ω—ã;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—É "–ö–æ—Ä–∑–∏–Ω–∞_–¢–æ–≤–∞—Ä"
    for (const item of cart) {
      await client.query(
        `INSERT INTO "–ö–æ—Ä–∑–∏–Ω–∞_–¢–æ–≤–∞—Ä" ("id_–ö–æ—Ä–∑–∏–Ω—ã", "id_–¢–æ–≤–∞—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
         VALUES ($1, $2, $3)`,
        [basketId, item.id, item.quantity]
      );
    }
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    ctx.session.cart = [];
    await ctx.reply('–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
    await showOrderHistory(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
  } finally {
    await client.end();
    ctx.answerCbQuery();
  }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
bot.action('order_history', async (ctx) => {
  await deleteLastMessage(ctx);
  await showOrderHistory(ctx);
  ctx.answerCbQuery();
});

async function showOrderHistory(ctx) {
  if (!ctx.session.user) {
    await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å.');
    ctx.session.fromProfile = false; 
    return;
  }
  ctx.session.fromProfile = true; 
  const client = dbClient();
  await client.connect();
  try {
    const userId = ctx.session.user.id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    const res = await client.query(
      `SELECT "id_–ó–∞–∫–∞–∑–∞", "–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è", "–°—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞–∫–∞–∑–∞"
       FROM "–ó–∞–∫–∞–∑—ã"
       WHERE "id_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" = $1
       ORDER BY "–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è" DESC
       LIMIT 5`,
      [userId]
    );

    if (res.rows.length === 0) {
      await ctx.reply('üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
      ctx.session.fromProfile = false; 
      await showUserProfile(ctx);
    } else {
      const list = res.rows.map(o =>
        `üì¶ <b>–ó–∞–∫–∞–∑ #${o.id_–ó–∞–∫–∞–∑–∞}</b>\nüïì <b>–î–∞—Ç–∞:</b> ${new Date(o.–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è).toLocaleString()}\nüìç <b>–°—Ç–∞—Ç—É—Å:</b> ${o.–°—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞}\nüí∞ <b>–°—É–º–º–∞:</b> ${o.–°—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞–∫–∞–∑–∞} ‚ÇΩ`
      ).join('\n\n');

      const backBtn = Markup.inlineKeyboard([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]]);
      await ctx.replyWithHTML(list, backBtn);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  } finally {
    await client.end();
  }
}





// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.action('register', async (ctx) => {
  ctx.session.mode = 'register';
  ctx.session.registration = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  console.log('–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. ctx.session.mode:', ctx.session.mode);
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
  ctx.answerCbQuery();
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
  console.log('–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:', ctx.session.mode);

  // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (ctx.session.mode === 'register') {
    await handleRegistration(ctx);
    return;
  }

  // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –ª–æ–≥–∏–Ω–∞ –∞–∫—Ç–∏–≤–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞
  if (ctx.session.mode === 'login') {
    await handleLogin(ctx);
    return;
  }

  if (ctx.session.waitingForSearch) {
    ctx.session.waitingForSearch = false;
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –∏ –∏—â–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    const client = dbClient();
    await client.connect();
    try {
      // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã, –≥–¥–µ –∞—Ä—Ç–∏–∫—É–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      const res = await client.query(
        `SELECT * FROM "–¢–æ–≤–∞—Ä" WHERE LOWER("–ê—Ä—Ç–∏–∫—É–ª") LIKE $1`,
        [`%${text.toLowerCase()}%`]
      );
      if (res.rows.length === 0) {
        await ctx.reply('‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        await deleteLastMessage(ctx);
        ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –∫–∞—Ç–∞–ª–æ–≥
        ctx.session.catalog = res.rows;
        ctx.session.catalogIndex = 0;
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
        await updateCatalogMessage(ctx);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', err);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.');
    } finally {
      await client.end();
    }
    return;
  }
  
  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.');
});




//–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegistration(ctx) {
  const text = ctx.message.text.trim();
  const reg = ctx.session.registration;

  // –í–∞–ª–∏–¥–∞—Ü–∏–∏
  const isAlpha = str => /^[–∞-—è–ê-–Øa-zA-Z—ë–Å\-]+$/.test(str); 
  const isPhoneValid = str => /^\+7\d{10}$/.test(str); 
  const isEmailValid = str => /\S+@\S+\.\S+/.test(str); 
  const isBirthDateValid = str => /^\d{2}\.\d{2}\.\d{4}$/.test(str); 
  const isGenderValid = str => /^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$/i.test(str); 


  if (!reg.email) {
    if (!isEmailValid(text)) {
      return ctx.reply('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü—Ä–∏–º–µ—Ä: example@mail.ru\n–í–≤–µ–¥–∏—Ç–µ email:');
    }
    reg.email = text;
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
  }

  if (!reg.password) {
    reg.password = text;
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é:');
  }

  if (!reg.lastName) {
    if (!isAlpha(text)) {
      return ctx.reply('‚ùó –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
    }
    reg.lastName = text;
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ò–º—è:');
  }

  if (!reg.firstName) {
    if (!isAlpha(text)) {
      return ctx.reply('‚ùó –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
    }
    reg.firstName = text;
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –û—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "-"):');
  }

  if (!reg.middleName) {
    if (text !== '-' && !isAlpha(text)) {
      return ctx.reply('‚ùó –û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–ª–∏ "-". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
    }
    reg.middleName = (text === '-' ? '' : text);
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ü–æ–ª (–ú—É–∂—Å–∫–æ–π/–ñ–µ–Ω—Å–∫–∏–π):');
  }

  if (!reg.gender) {
    if (!isGenderValid(text)) {
      return ctx.reply('‚ùó –ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–ú—É–∂—Å–∫–æ–π" –∏–ª–∏ "–ñ–µ–Ω—Å–∫–∏–π". –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:');
    }
    reg.gender = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase(); // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ—Ñ–æ–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999):');
  }

  if (!reg.phone) {
    if (!isPhoneValid(text)) {
      return ctx.reply('‚ùó –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:');
    }
    reg.phone = text;
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ê–¥—Ä–µ—Å:');
  }

  if (!reg.address) {
    reg.address = text;
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):');
  }

  if (!reg.birthDate) {
    if (!isBirthDateValid(text)) {
      return ctx.reply('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 01.01.2000\n–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:');
    }
    reg.birthDate = text;
    // –í—Å—ë —Å–æ–±—Ä–∞–Ω–æ ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    const summary = `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n` +
      `<b>Email:</b> ${reg.email}\n` +
      `<b>–ü–∞—Ä–æ–ª—å:</b> ${reg.password}\n` +
      `<b>–§–∞–º–∏–ª–∏—è:</b> ${reg.lastName}\n` +
      `<b>–ò–º—è:</b> ${reg.firstName}\n` +
      `<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> ${reg.middleName || '‚Äî'}\n` +
      `<b>–ü–æ–ª:</b> ${reg.gender}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${reg.phone}\n` +
      `<b>–ê–¥—Ä–µ—Å:</b> ${reg.address}\n` +
      `<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${reg.birthDate}\n`;

    return ctx.replyWithHTML(summary,
      Markup.inlineKeyboard([
        [{ text: '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ', callback_data: 'register_confirm' }],
        [{ text: '–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'register_restart' }]
      ])
    );
  }
}

//–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.action('register_confirm', async (ctx) => {
  const reg = ctx.session.registration;
  const client = dbClient();
  await client.connect();
  try {
    const query = `
      INSERT INTO "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" 
      ("–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–ü–æ–ª", "–¢–µ–ª–µ—Ñ–æ–Ω", "email", "–ê–¥—Ä–µ—Å", "–ü–∞—Ä–æ–ª—å", "–î–∞—Ç–∞_–†–æ–∂–¥–µ–Ω–∏—è")
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING *;
    `;
    const params = [
      reg.lastName,
      reg.firstName,
      reg.middleName || '',
      reg.gender,
      reg.phone,
      reg.email,
      reg.address,
      reg.password,
      reg.birthDate
    ];
    const result = await client.query(query, params);
    ctx.session.user = result.rows[0];  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    ctx.session.mode = null;
    ctx.session.registration = null;
    await showUserProfile(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  } finally {
    await client.end();
    ctx.answerCbQuery();
  }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.action('register_restart', async (ctx) => {
  ctx.session.registration = {};
  await ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:');
  ctx.answerCbQuery();
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞
bot.action('login', async (ctx) => {
  ctx.session.mode = 'login';
  ctx.session.login = {};
  console.log('–ù–∞—á–∞–ª–æ –ª–æ–≥–∏–Ω–∞. ctx.session.mode:', ctx.session.mode);
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email –¥–ª—è –≤—Ö–æ–¥–∞:');
  ctx.answerCbQuery();
});


//–§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function handleLogin(ctx) {
  const text = ctx.message.text.trim();
  const loginData = ctx.session.login;
  
  if (!loginData.email) {
    loginData.email = text;
    console.log('–õ–æ–≥–∏–Ω: email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', loginData.email);
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    return;
  }
  if (!loginData.password) {
    loginData.password = text;
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    const client = dbClient();
    await client.connect();
    try {
      const res = await client.query(
        `SELECT * FROM "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" WHERE "email" = $1`,
        [loginData.email]
      );
      if (res.rows.length === 0 || res.rows[0].–ü–∞—Ä–æ–ª—å !== loginData.password) {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        ctx.session.login = {}; // –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω–∞
      } else {
        ctx.session.user = res.rows[0];
        await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
        ctx.session.mode = null;
        ctx.session.login = null;
        await showUserProfile(ctx); 
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', err);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    } finally {
      await client.end();
    }
  }
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
bot.action('back', async (ctx) => {
  await deleteLastMessage(ctx);

  if (ctx.session.fromProfile) {
    ctx.session.fromProfile = false; 
    await showUserProfile(ctx); 
  } else {
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
  }

  await ctx.answerCbQuery();
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "logout" ‚Äì –≤—ã—Ö–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
bot.action('logout',async (ctx) => {
  ctx.session.user = null;
  ctx.session.cart = [];
  await deleteLastMessage(ctx);
  ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏.');
  ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
  ctx.answerCbQuery();
});


// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function deleteLastMessage(ctx) {
  if (ctx.updateType === 'callback_query') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
  }
}


const keyboard = Markup.keyboard([
  ['/restart', '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'],
  ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']
]).resize();

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

